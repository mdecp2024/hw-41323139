<h1>About</h1>
<p>國立虎尾科技大學機械設計工程系</p>
<p>National Formosa University</p>
<p>Department of Mechanical Design Engineering</p>
<p>cp2024 計算機程式</p>
<p>課程教材:</p>
<p style="padding-left: 30px;"><a href="https://blog.jupyter.org/introducing-learn-python-with-jupyter-11214f152159">Learn Python with Jupyter</a> (<a href="https://www.learnpythonwithjupyter.com/">site</a>, <a href="https://localhost:9445/downloads/learn_python_with_jupyter.pdf">ebook</a>)</p>
<p style="padding-left: 30px;">教育版帳號 microsoftonline 登入點: <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a></p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入 <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a> Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: <span class="fui-Text ___vec8h90 fk6fouc f1pbo8a8 f1i3iumi figsok6 fpgzoln f1w7gpdv f6juhto f1mtd64y f1y7q3j9 f2jf649 foxqkq2" data-tid="join-team-code">ldodwua</span></p>
<p>個人倉儲:<a href="https://github.com/mdecp2024/hw-41323139">https://github.com/mdecp2024/hw-41323139</a></p>
<p>個人網站:<a href="https://mdecp2024.github.io/hw-41323139/content/index.html">https://mdecp2024.github.io/hw-41323139/content/index.html</a></p>
<p>其他資訊:</p>
<p style="padding-left: 30px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 30px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<h1>Attendance</h1>
<p>出席 (10%) - 自行舉證評分</p>
<p>自行利用 Github commits 提交記錄評分.</p>
<h1>HW 1</h1>
<h4>主題: 基於瀏覽器的分散式版次管理與整合程式開發環境 (10%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">USB 隨身碟:</p>
<p style="padding-left: 60px;">下載 <a href="http://229.cycu.org/python_2025_lite.7z">python_2025_lite.7z</a> (428 MB, 解開壓縮後約 1.5 GB)</p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cp2024/content/Jupyter.html">Jupyter</a></p>
<p style="padding-left: 30px;">What are Github and Codespaces?</p>
<p style="padding-left: 60px;"><a href="https://docs.github.com/en/get-started/start-your-journey/hello-world">Hello World - GitHub Docs</a></p>
<p style="padding-left: 30px;">利用包含學號的字串作為帳號, 申請免費使用 Github.</p>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 1</p>
<hr/>
<p>PART 1: Creating the basics 資料整理 (10%)</p>
<p>啟動可攜程式系統後, 在命令列中:</p>
<p>y:\&gt;cd notebook</p>
<p>y:\notebook&gt;jupyter lab --collaborative</p>
<p>進入 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a> 練習如何修改 PART1 notebook 後存檔, 上傳至作業倉儲中的 downloads 目錄後, 透過 <a href="https://nbviewer.org/">https://nbviewer.org/</a> 將已經提交的 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a>, 嵌入下列網頁中.</p>
<p><iframe height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb" width="600"></iframe></p>
<p>上列 iframe 標註的 html 語法:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;iframe width="600" height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb"&gt;&lt;/iframe&gt;</pre>
<p>完成上述流程整理後, 請將 HW1 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 1 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 Topic 1 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w7</h3>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="353" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/dgEudN0aksY" title="chrome nu6XolGXmn" width="657"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="353" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/U-0T94e1OmY" title="chrome KbsLZHy1ym" width="657"></iframe></p>
<p></p>
<h3>w10</h3>
<p><br/><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/xLSGyfjYXx0" width="560"></iframe></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/9IqriKWYnAE" width="560"></iframe></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/zLrN7aFMCo8" width="560"></iframe></p>
<h3>w11_hw</h3>
<p>1.  已知可以用 Python 程式<a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5e6eda7a004c15fa7262b9a80bfa4af6/raw/c2225ac22f32ee8485a630b42cf3f4d8567bb661/up_to_down_pyramid.py">由上往下列印三角形 *</a>, 或<a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5e6eda7a004c15fa7262b9a80bfa4af6/raw/56793c72d4495d564e3cc6214ed5fb68dbd2b21d/left_to_right_pyramid.py">由左往右列印三角形 *</a>, 請將此程式延伸到可以在 10x10 的字元區域中, 以 "*" 字元列印出圓型區域. 完成後請將程式碼存入個人 Gist 後, 直接在個人作業網站中的 Brython 頁面中執行. (提示: ?src=gist_script_URL)</p>
<p><a href="https://mdecp2024.github.io/hw-41323139/content/Brython.html?src=https://gist.githubusercontent.com/41323139/3c3751e6f864bbcc9d4cdf92d6febb36/raw/a3eded1f27f592a359b84098af288243e2383ebc/w11-1.py">利用"*"畫成的圓</a></p>
<p>2. 已知可以在網頁中利用 Brython 繪製方格與塗色, 如下連結, 請設法修改此一程式, 直接將程式存入個人的 Gist, 並利用黑色方塊圍出一個圓形區域.</p>
<p><a href="https://mdecp2024.github.io/hw-41323139/content/Brython.html?src=https://gist.githubusercontent.com/41323139/f60090d5195b7e7dd19481f05e4230bf/raw/e6ce4eec08fbdc7c5833db845f140b1f79e55027/w11-2.py">網頁上的方格與塗色</a></p>
<p>3. 完成上列題目後, 請利用 Youtube 影片<span>簡報</span>個人的解題過程與心得.</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/m6XF3N0WOAo" width="560"></iframe></p>
<p></p>
<h3>w12</h3>
<p>hw1:<a href="https://mdecp2024.github.io/hw-41323139/content/Brython.html?src=https://gist.githubusercontent.com/41323139/c4fa07e0feedb4cc6df9f38205b18ddd/raw/b04241f9f60b7ef2194bde88a7f56934ee672401/w12_test1.py">使用迴圈及列印的程式</a></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/gZiy8jR2cO0" width="560"></iframe></p>
<p></p>
<h3>w12_hw</h3>
<p>08_for_range</p>
<p>範例:<a href="https://mdecp2024.github.io/hw-41323139/content/Brython.html?src=https://gist.githubusercontent.com/41323139/c2e69c49274ea7e48a019a708462775e/raw/b91ba2d61dc8b0dcdf0ee8e15d60c70837931e58/hw12_8.py">列印朋友與最愛食物對應關係</a></p>
<p>說明:</p>
<ul>
<li>
<p><strong><code>friends</code> 和 <code>dishes</code></strong>：</p>
<ul>
<li>定義兩個清單：<code>friends</code> 包含朋友的名字，<code>dishes</code> 包含他們最喜歡的食物。</li>
</ul>
</li>
<li>
<p><strong>列印清單內容</strong>：</p>
<ul>
<li>使用 <code>print</code> 來顯示清單和其內容。</li>
</ul>
</li>
<li>
<p><strong><code>for</code> 迴圈</strong>：</p>
<ul>
<li>使用 <code>for</code> 迴圈搭配 <code>range</code> 函數遍歷清單，列印每個元素的索引及值。</li>
</ul>
</li>
<li>
<p><strong>結合清單資訊</strong>：</p>
<ul>
<li>使用最後一個迴圈將朋友名字與他們最喜歡的食物結合，格式化顯示。</li>
</ul>
</li>
</ul>
<p></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 定義朋友的名字清單
friends = ["Geetha", "Luca", "Daisy", "Juhan"]  # 朋友們的名字
# 定義食物的名字清單
dishes  = ["sushi", "burgers", "tacos", "pizza"]  # 他們最喜歡的食物

# 列印朋友的名字
print("My friends' names are:")  # 顯示 "我的朋友的名字是："
print(friends)  # 顯示朋友名字的清單

# 迴圈遍歷朋友清單，顯示每個朋友的索引和值
for index in range(0, 4):  # 從索引 0 遍歷到 3
    print("index:  " + str(index))  # 顯示當前的索引
    print("friend: " + friends[index])  # 顯示對應索引的朋友名字

# 列印他們最喜歡的食物
print("Their favorite dishes are:")  # 顯示 "他們最喜歡的食物是："
print(dishes)  # 顯示食物清單

# 迴圈遍歷食物清單，顯示每個食物的索引和值
for index in range(0, 4):  # 從索引 0 遍歷到 3
    print("index:  " + str(index))  # 顯示當前的索引
    print("dish: " + dishes[index])  # 顯示對應索引的食物

# 結合兩個清單，顯示朋友和他們最喜歡的食物
for index in range(0, 4):  # 從索引 0 遍歷到 3
    print("My friend " + friends[index] + "'s favorite dish is " + dishes[index])
    # 顯示每位朋友最喜歡的食物
</pre>
<p></p>
<p>09_for_loop_if_equals</p>
<p>範例:<a href="https://mdecp2024.github.io/hw-41323139/content/Brython.html?src=https://gist.githubusercontent.com/41323139/c2e69c49274ea7e48a019a708462775e/raw/31c6e6d80e61cd274a38ec28de440d7c5ddc85aa/hw12_9.py">動物清單與目標搜尋</a></p>
<p>說明:</p>
<ul>
<li>
<p><strong><code>animals</code> 清單</strong>：</p>
<ul>
<li>定義了一個包含三種動物名稱的清單：<code>giraffe</code>（長頸鹿）、<code>penguin</code>（企鵝）、<code>dolphin</code>（海豚）。</li>
</ul>
</li>
<li>
<p><strong>第一次迴圈：列印動物及其位置</strong>：</p>
<ul>
<li>使用 <code>for</code> 迴圈和 <code>range</code> 函數來遍歷清單，列印每個動物的索引和名稱。</li>
<li>顯示每次迴圈的起點，並列出動物及其在清單中的位置。</li>
</ul>
</li>
<li>
<p><strong>定義目標動物</strong>：</p>
<ul>
<li>設定變數 <code>wanted_to_see</code> 為想看到的動物「企鵝」。</li>
</ul>
</li>
<li>
<p><strong>第二次迴圈：檢查目標動物</strong>：</p>
<ul>
<li>再次遍歷清單，判斷當前動物是否為目標動物。</li>
<li>若是目標動物，則列印特殊訊息；否則僅列印看到的動物。</li>
</ul>
</li>
</ul>
<p></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 定義動物清單
animals = ["giraffe", "penguin", "dolphin"]  # 動物清單：長頸鹿、企鵝、海豚
print(animals)  # 列印整個清單內容

# 使用 for 迴圈遍歷清單，並顯示每個動物及其位置
for i in range(0, len(animals)):  # 使用 range() 遍歷清單，索引從 0 到清單長度 - 1
    print("-- Beginning of loop --")  # 提示每次迴圈的開始
    # 列印每個元素的位置及其值
    print("The element in position " + str(i) + " is " + animals[i])  
    # 顯示目前索引位置的動物名稱

# 定義想看到的動物
wanted_to_see = "penguin"  # 定義目標動物為企鵝

# 再次遍歷動物清單，檢查是否遇到想看到的動物
for i in range(0, len(animals)):
    # 如果目前的動物是想看到的動物
    if animals[i] == wanted_to_see:
        # 列印出這是你真正想看到的動物
        print("I saw a " + animals[i] + " and I really wanted to see it!")
    # 如果目前的動物不是想看到的動物
    else:
        # 只是列印出你看到了這個動物
        print("I saw a " + animals[i])
</pre>
<p></p>
<p></p>
<p>10_for_search</p>
<p>範例:<a href="https://mdecp2024.github.io/hw-41323139/content/Brython.html?src=https://gist.githubusercontent.com/41323139/c2e69c49274ea7e48a019a708462775e/raw/07a14b9cfdc4c58c763aa3e7a6dfefd36afe4f04/hw12_10.py">使用條件篩選與索引操作配件清單</a></p>
<p>說明:</p>
<ul>
<li>
<p><strong>清單定義與列印</strong>：</p>
<ul>
<li><code>accessories</code> 包含多種配件名稱。</li>
<li>使用 <code>print</code> 列印出清單內容。</li>
</ul>
</li>
<li>
<p><strong>迴圈與條件判斷</strong>：</p>
<ul>
<li>使用 <code>for</code> 迴圈和 <code>range</code> 遍歷每個配件，配合條件判斷其字元長度或位置是否符合特定條件。</li>
</ul>
</li>
<li>
<p><strong>條件分類</strong>：</p>
<ul>
<li>判斷字元長度是否等於、小於、大於或不等於門檻值，並根據條件篩選元素。</li>
<li>判斷索引位置是否小於、等於或大於門檻值，篩選元素並列印相關資訊。</li>
</ul>
</li>
<li>
<p><strong>門檻值變數</strong>：</p>
<ul>
<li>使用 <code>n_of_characters</code> 與 <code>position</code> 來設定字元長度和索引位置的判斷標準，以便靈活控制篩選條件。</li>
</ul>
</li>
</ul>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 定義配件清單
accessories = ["belt", "hat", "gloves", "sunglasses", "ring"]  # 配件清單
print(accessories)  # 列印整個清單內容

# 迴圈遍歷清單，顯示每個元素及其位置
for i in range(len(accessories)):  # 從索引 0 遍歷到清單長度 - 1
    print("The element " + accessories[i] + " is in position " + str(i))
    # 列印每個元素的名稱及其位置

# 篩選出長度為 6 的元素
for i in range(len(accessories)):
    if len(accessories[i]) == 6:  # 如果元素長度為 6
        print("The element " + accessories[i] + " is in position " + str(i) + " and it has 6 characters")
        # 列印符合條件的元素及其相關資訊

# 篩選出長度小於 6 的元素
for i in range(len(accessories)):
    if len(accessories[i]) &lt; 6:  # 如果元素長度小於 6
        print("The element " + accessories[i] + " is in position " + str(i) + " and it has less than 6 characters")
        # 列印符合條件的元素及其相關資訊

# 篩選出長度大於 6 的元素
n_of_characters = 6  # 設定字元長度的門檻值
for i in range(len(accessories)):
    if len(accessories[i]) &gt; n_of_characters:  # 如果元素長度大於門檻值
        print("The element " + accessories[i] + " is in position " + str(i) + " and it has more than " + str(n_of_characters) + " characters")
        # 列印符合條件的元素及其相關資訊

# 篩選出長度不等於 6 的元素
for i in range(len(accessories)):
    if len(accessories[i]) != n_of_characters:  # 如果元素長度不等於門檻值
        print("The element " + accessories[i] + " is in position " + str(i) + " and it has a number of characters different from " + str(n_of_characters))
        # 列印符合條件的元素及其相關資訊

# 篩選位置小於等於 2 的元素
position = 2  # 設定位置門檻值
for i in range(len(accessories)):
    if i &lt;= position:  # 如果元素位置小於或等於門檻值
        print("The element " + accessories[i] + " is in position " + str(i) + ", which is less than or equal to " + str(position))
        # 列印符合條件的元素及其相關資訊

# 篩選位置大於等於 2 的元素
for i in range(len(accessories)):
    if i &gt;= position:  # 如果元素位置大於或等於門檻值
        print("The element " + accessories[i] + " is in position " + str(i) + ", which is at least " + str(position))
        # 列印符合條件的元素及其相關資訊
</pre>
<p><br/><br/></p>
<p>
<script type="text/python">
from browser import html
from browser import document as doc

# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width=600, height=600)  # 調整畫布大小以容納圓形
brython_div = doc["brython_div1"]
brython_div <= canvas

ctx = canvas.getContext("2d")
ctx.lineWidth = 1

# 1. 繪製兩個矩形 (紅色邊框)
ctx.strokeStyle = 'red'  # 設定矩形的邊框顏色為紅色
ctx.beginPath()
ctx.rect(100, 100, 200, 200)  # 第一個正方形的左上角在(100, 100)，邊長200
ctx.rect(200, 200, 200, 200)  # 第二個正方形的左上角在(200, 200)，邊長200
ctx.stroke()

# 2. 繪製對角線 (藍色) - 只連接第一個矩形的左上角和第一個矩形的右下角
ctx.strokeStyle = 'blue'  # 設定對角線顏色為藍色
ctx.beginPath()
ctx.moveTo(100, 100)  # 起點為第一個矩形的左上角 (100, 100)
ctx.lineTo(300, 300)  # 終點為第一個矩形的右下角 (300, 300)
ctx.stroke()

# 3. 繪製兩個外切圓 (黑色)
ctx.strokeStyle = 'black'  # 設定圓的顏色為黑色

# 第一個矩形的外切圓
ctx.beginPath()
ctx.arc(200, 200, 141.4, 0, 2 * 3.14)  # 圓心在(200, 200)，半徑為141.4（sqrt(2) * 邊長的一半）
ctx.stroke()

# 第二個矩形的外切圓
ctx.beginPath()
ctx.arc(300, 300, 141.4, 0, 2 * 3.14)  # 圓心在(300, 300)，半徑為141.4
ctx.stroke()
</script>
</p><h3>w13_hw</h3>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/puQQDrrtpMw?si=ly5i6YJwxT4tU_Z-" title="YouTube video player" width="560"></iframe></p>
<p></p>
<p></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc
 
# Create canvas element
canvas = html.CANVAS(width=500, height=500)
brython_div = doc["brython_div1"]
brython_div &lt;= canvas
 
# Define circle centers and radius
x1, y1 = 200, 200  # Center of the first circle
x2, y2 = 300, 300  # Center of the second circle
radius = 141.4  # Radius of the circles
 
ctx = canvas.getContext("2d")
 
# Draw the first circle (fill color and border color)
ctx.beginPath()
ctx.arc(x1, y1, radius, 0, 2 * 3.14159)
ctx.fillStyle = "lightcoral"  # Fill color for the first circle
ctx.fill()
ctx.lineWidth = 2
ctx.strokeStyle = "darkgreen"  # Border color for the first circle
ctx.stroke()
 
# Draw the second circle (fill color and border color)
ctx.beginPath()
ctx.arc(x2, y2, radius, 0, 2 * 3.14159)
ctx.fillStyle = "plum"  # Fill color for the second circle
ctx.fill()
ctx.lineWidth = 2
ctx.strokeStyle = "navy"  # Border color for the second circle
ctx.stroke()
 
# Fill the intersection area of the two circles
ctx.save()
ctx.beginPath()
ctx.arc(x1, y1, radius, 0, 2 * 3.14159)
ctx.clip()  # Set the clipping area to the first circle
ctx.beginPath()
ctx.arc(x2, y2, radius, 0, 2 * 3.14159)
ctx.fillStyle = "lightcyan"  # Color for the intersection
ctx.fill()
ctx.restore()
 
# Draw the first square (orange border, light yellow fill)
ctx.beginPath()
ctx.rect(100, 100, 200, 200)
ctx.fillStyle = "lightyellow"  # Fill color for the first square
ctx.fill()
ctx.lineWidth = 2
ctx.strokeStyle = "orange"  # Border color for the first square
ctx.stroke()
 
# Draw the second square (brown border, pale green fill)
ctx.beginPath()
ctx.rect(200, 200, 200, 200)
ctx.fillStyle = "palegreen"  # Fill color for the second square
ctx.fill()
ctx.strokeStyle = "brown"  # Border color for the second square
ctx.stroke()
 
# Draw the borders of the circles (border colors retained)
ctx.beginPath()
ctx.arc(x1, y1, radius, 0, 2 * 3.14159)
ctx.lineWidth = 3
ctx.strokeStyle = "darkgreen"
ctx.stroke()
 
ctx.beginPath()
ctx.arc(x2, y2, radius, 0, 2 * 3.14159)
ctx.lineWidth = 3
ctx.strokeStyle = "navy"
ctx.stroke()
 
# Draw the diagonal line on top and separately
ctx.beginPath()
ctx.moveTo(100, 100)
ctx.lineTo(300, 300)
ctx.strokeStyle = "darkred"  # Diagonal line color
ctx.lineWidth = 2
ctx.stroke()
</pre>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<h3>w14</h3>
<p><span>請根據三個圓繪圖所圍成的區域</span><span>進行不同顏色著色, 條件是當各圓半徑與圓心座標變動時, 程式只需輸入三個圓的圓心座標與半徑, 就可以完成各區域的著色任務</span></p>
<p><span></span><a href="https://mdecp2024.github.io/hw-41323139/content/Brython.html?src=https://gist.githubusercontent.com/41323139/e926c5adda1076c173c67422e18f3d37/raw/9b2d87ffd72705d2ed3662b5f7f5fc5eceab458d/w14.py">程式連結</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc
import random
import math

# 定義一個函式來初始化畫布
def initialize_canvas(canvas_width=400, canvas_height=400, id="brython_div1"):
    """
    初始化畫布，創建一個指定大小的 Canvas 元素，並將其加到 HTML 文件中。
    返回畫布元素和它的 2D 繪圖上下文。
    """
    canvas = html.CANVAS(width=canvas_width, height=canvas_height)
    brython_div = doc[id]
    brython_div &lt;= canvas
    ctx = canvas.getContext("2d")
    return canvas, ctx

# 定義一個隨機顏色生成函式
def random_color_generator():
    r = random.randint(0, 255)
    g = random.randint(0, 255)
    b = random.randint(0, 255)
    return f"rgb({r}, {g}, {b})"

# 判斷點 (px, py) 是否在圓內
def is_point_in_circle(px, py, cx, cy, r):
    return (px - cx) ** 2 + (py - cy) ** 2 &lt;= r ** 2

# 主函式：繪製並填充多個圓的區域
def draw_circles_dynamic():
    """
    根據使用者輸入的圓心座標與半徑，繪製多個圓，並填充各區域。
    使用者需要輸入每個圓的信息，包含 (cx, cy, r)，即圓心座標和半徑。
    """
    # 輸入圓的數量
    num_circles = int(input("請輸入圓的數量: "))

    # 初始化圓的參數列表
    circles = []
    for i in range(num_circles):
        print(f"請輸入第 {i + 1} 個圓的參數:")
        cx = int(input("圓心 x 座標: "))
        cy = int(input("圓心 y 座標: "))
        r = int(input("半徑: "))
        circles.append((cx, cy, r))

    canvas, ctx = initialize_canvas(400, 400)
    ctx.clearRect(0, 0, canvas.width, canvas.height)

    color_dict = {}
    
    for py in range(canvas.height):
        for px in range(canvas.width):
            # 檢查當前點在哪些圓內
            in_circles = [i for i, (cx, cy, r) in enumerate(circles) if is_point_in_circle(px, py, cx, cy, r)]

            # 決定顏色
            if len(in_circles) &gt; 1:
                key = "intersection"
            elif len(in_circles) == 1:
                key = f"circle{in_circles[0]}"
            else:
                key = "background"

            if key not in color_dict:
                color_dict[key] = random_color_generator() if key != "background" else "white"

            # 填充顏色
            ctx.fillStyle = color_dict[key]
            ctx.fillRect(px, py, 1, 1)

# 呼叫函式來繪製圓
draw_circles_dynamic()
</pre>
<h3>w15</h3>
<p><span>題目一: 請利用 Gist 與 Brython 程式環境, 在個人的課程網站中新增一個頁面, 標題為 w15, 以"從 1 累加到 100"作為 anchor 的連結標題, 使用者點擊該連結之後, 可從各自的 Brython 頁面執行程式.</span></p>
<p><a href="https://mdecp2024.github.io/hw-41323139/content/Brython.html?src=https://gist.githubusercontent.com/41323139/8204068d8bf202f96b8e171e97b51ed8/raw/3bcda4927a410749ac1919090535a476f8b2e98c/w15_ex1">從 1 累加到 100</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">sum = 0

for i in range(0,101):
    sum += i
print(sum)</pre>
<p><span></span></p>
<p><span>題目二: 延伸上題, 設計一個函式 addto(1, 100), 可以完成上述的累加結果. (以"addto"作為連結標題)</span></p>
<p><a href="https://mdecp2024.github.io/hw-41323139/content/Brython.html?src=https://gist.githubusercontent.com/41323139/8204068d8bf202f96b8e171e97b51ed8/raw/5b19c45f71a59341495b952fd503b7b800bcddb6/w15_ex2.py">addto</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def addto(x,y):
  sum = 0
  for i in range(x,y+1):
    sum += i
  print(sum)

addto(0,100)</pre>
<p><span></span></p>
<p><span>題目三: 延伸上題, 設計一個函式 add_only_even(1, 100), 可以完成從第一個輸入整數, 累加到第二個輸入變數的累加結果. 頁面中請以 add_only_even 作為連結標題.</span></p>
<p><a href="https://mdecp2024.github.io/hw-41323139/content/Brython.html?src=https://gist.githubusercontent.com/41323139/8204068d8bf202f96b8e171e97b51ed8/raw/5b19c45f71a59341495b952fd503b7b800bcddb6/w15_ex3.py">add_only_even</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def addto(x,y):
  sum = 0
  for i in range(x,y+1):
    sum += i
    print(sum)

addto(0,100)</pre>
<p><span></span></p>
<p><span>題目四: 延伸上題, 設計一個函式 add_avoid_8(1, 100), 可以完成從第一個輸入整數, 累加到第二個輸入變數的累加過程, 必須避開數字出現"8"的整數, 頁面中請以 add_avoid_8 作為連結標題.</span></p>
<p><a href="https://mdecp2024.github.io/hw-41323139/content/Brython.html?src=https://gist.githubusercontent.com/41323139/8204068d8bf202f96b8e171e97b51ed8/raw/1379cb57bed82552c8b4c48efeadd66e681aac91/w15_ex4.py">add_avoid_8</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def add_avoid_8(start, end):
    """
    累加從 start 到 end 的所有整數，避開包含數字 8 的整數。
    :param start: 起始整數
    :param end: 結束整數
    :return: 符合條件的累加結果
    """
    total = 0
    for num in range(start, end + 1):
        if '8' not in str(num):  # 判斷是否包含數字 8
            total += num
    return total

# 測試範例
result = add_avoid_8(1, 100)
print("累加結果:", result)</pre>
<p></p>
<script type="text/python3">
from browser import html
from browser import document as doc

# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width=600, height=600)  # 調整畫布大小以容納圓形
brython_div = doc["brython_div1"]
brython_div <= canvas

ctx = canvas.getContext("2d")
ctx.lineWidth = 1

# 1. 繪製兩個矩形 (紅色邊框)
ctx.strokeStyle = 'red'  # 設定矩形的邊框顏色為紅色
ctx.beginPath()
ctx.rect(100, 100, 200, 200)  # 第一個正方形的左上角在(100, 100)，邊長200
ctx.rect(200, 200, 200, 200)  # 第二個正方形的左上角在(200, 200)，邊長200
ctx.stroke()

# 2. 繪製對角線 (藍色) - 只連接第一個矩形的左上角和第一個矩形的右下角
ctx.strokeStyle = 'blue'  # 設定對角線顏色為藍色
ctx.beginPath()
ctx.moveTo(100, 100)  # 起點為第一個矩形的左上角 (100, 100)
ctx.lineTo(300, 300)  # 終點為第一個矩形的右下角 (300, 300)
ctx.stroke()
from browser import html
from browser import document as doc
 
# Create canvas element
canvas = html.CANVAS(width=500, height=500)
brython_div = doc["brython_div1"]
brython_div <= canvas
 
# Define circle centers and radius
x1, y1 = 200, 200  # Center of the first circle
x2, y2 = 300, 300  # Center of the second circle
radius = 141.4  # Radius of the circles
 
ctx = canvas.getContext("2d")
 
# Draw the first circle (fill color and border color)
ctx.beginPath()
ctx.arc(x1, y1, radius, 0, 2 * 3.14159)
ctx.fillStyle = "lightcoral"  # Fill color for the first circle
ctx.fill()
ctx.lineWidth = 2
ctx.strokeStyle = "darkgreen"  # Border color for the first circle
ctx.stroke()
 
# Draw the second circle (fill color and border color)
ctx.beginPath()
ctx.arc(x2, y2, radius, 0, 2 * 3.14159)
ctx.fillStyle = "plum"  # Fill color for the second circle
ctx.fill()
ctx.lineWidth = 2
ctx.strokeStyle = "navy"  # Border color for the second circle
ctx.stroke()
 
# Fill the intersection area of the two circles
ctx.save()
ctx.beginPath()
ctx.arc(x1, y1, radius, 0, 2 * 3.14159)
ctx.clip()  # Set the clipping area to the first circle
ctx.beginPath()
ctx.arc(x2, y2, radius, 0, 2 * 3.14159)
ctx.fillStyle = "lightcyan"  # Color for the intersection
ctx.fill()
ctx.restore()
 
# Draw the first square (orange border, light yellow fill)
ctx.beginPath()
ctx.rect(100, 100, 200, 200)
ctx.fillStyle = "lightyellow"  # Fill color for the first square
ctx.fill()
ctx.lineWidth = 2
ctx.strokeStyle = "orange"  # Border color for the first square
ctx.stroke()
 
# Draw the second square (brown border, pale green fill)
ctx.beginPath()
ctx.rect(200, 200, 200, 200)
ctx.fillStyle = "palegreen"  # Fill color for the second square
ctx.fill()
ctx.strokeStyle = "brown"  # Border color for the second square
ctx.stroke()
 
# Draw the borders of the circles (border colors retained)
ctx.beginPath()
ctx.arc(x1, y1, radius, 0, 2 * 3.14159)
ctx.lineWidth = 3
ctx.strokeStyle = "darkgreen"
ctx.stroke()
 
ctx.beginPath()
ctx.arc(x2, y2, radius, 0, 2 * 3.14159)
ctx.lineWidth = 3
ctx.strokeStyle = "navy"
ctx.stroke()
 
# Draw the diagonal line on top and separately
ctx.beginPath()
ctx.moveTo(100, 100)
ctx.lineTo(300, 300)
ctx.strokeStyle = "darkred"  # Diagonal line color
ctx.lineWidth = 2
ctx.stroke()
</script>
<h1>HW 2</h1>
<h2>HW 2 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 2 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w16_exam1</h3>
<p><span>請以</span><span>自己的學號最後四碼</span><span>作為繪圖的座標原點, (例如: 若學號最後四碼為 3139, 請將 (31,39) 作為繪圖座標原點), 並以 pixel=2 的黑色直線分別利用 Brython 繪圖, 標示出向右為正的 X 軸, 以及向下為正的 Y 軸, 並且利用文字標示出原點座標 (例如: (31, 39)), 之後請自選最左側圖形的起始點座標, 直接在頁面畫出下列圖像, 繪圖程式除了必須直接列在頁面 html 檔案外, 也請存入自己的 Gist 區域, 並在所完成的</span><span>圖像下方, 以自選標題的 anchor 連結至 Gist, 讓使用者點擊該連結後, 可以在各自的 Brython 頁面中繪出下列圖像</span></p>
<p><a href="https://mdecp2024.github.io/hw-41323139/content/Brython.html?src=https://gist.githubusercontent.com/41323139/98079477260d4dfe5907c89ad5c92d18/raw/53bce4a4520617025d337f070e47e9d89b4980da/w16_exam1.py">w16_exam1</a></p>
<p><img alt="" height="220" src="/images/螢幕擷取畫面 2024-12-26 160027.png" width="734"/></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/0LtnVB9_cyQ" width="560"></iframe></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc
from math import pi, sin, cos, sqrt

# 設置畫布尺寸
CANVAS_WIDTH = 800
CANVAS_HEIGHT = 600

# 設置原點
origin_x, origin_y = 31, 39
pixel = 2

# 創建畫布
def create_canvas():
    canvas = html.CANVAS(width=CANVAS_WIDTH, height=CANVAS_HEIGHT)
    canvas.style.border = "1px solid black"
    doc &lt;= canvas
    return canvas

canvas = create_canvas()
ctx = canvas.getContext("2d")

# 標示原點
def draw_origin():
    ctx.fillStyle = "black"
    ctx.beginPath()
    ctx.arc(origin_x, origin_y, 3, 0, 2 * pi)
    ctx.fill()
    ctx.font = "14px Arial"
    ctx.fillText(f"({origin_x},{origin_y})", origin_x + 5, origin_y - 5)

# 畫直線的函數
def draw_line(x1, y1, x2, y2):
    ctx.beginPath()
    ctx.moveTo(x1, y1)
    ctx.lineTo(x2, y2)
    ctx.lineWidth = pixel
    ctx.strokeStyle = "black"
    ctx.stroke()

# 繪製 X 軸和 Y 軸
def draw_axes():
    draw_line(0, origin_y, CANVAS_WIDTH, origin_y)  # X 軸
    draw_line(origin_x, 0, origin_x, CANVAS_HEIGHT)  # Y 軸

# 繪製正六邊形
def draw_hexagon(x, y, size):
    ctx.beginPath()
    for i in range(6):
        angle = pi / 3 * i
        x_i = x + size * cos(angle)
        y_i = y + size * sin(angle)
        if i == 0:
            ctx.moveTo(x_i, y_i)
        else:
            ctx.lineTo(x_i, y_i)
    ctx.closePath()
    ctx.fillStyle = "lightblue"  # 填充顏色
    ctx.fill()  # 填充顏色

# 繪製更尖且縮小的菱形
def draw_sharp_small_diamond(x, y, size):
    ctx.beginPath()
    # 調整菱形的頂部和底部，使其更尖並縮小
    ctx.moveTo(x, y - size * 1.2)  # 上頂點 (更尖)
    ctx.lineTo(x + size * 0.8, y)  # 右頂點 (縮小)
    ctx.lineTo(x, y + size * 1.2)  # 下頂點 (更尖)
    ctx.lineTo(x - size * 0.8, y)  # 左頂點 (縮小)
    ctx.closePath()
    ctx.fillStyle = "lightgreen"  # 填充顏色
    ctx.fill()  # 填充顏色

# 繪製縮小的三角形
def draw_triangle(x, y, size):
    height = size * sqrt(3) / 2
    ctx.beginPath()
    ctx.moveTo(x, y)  # 左下角
    ctx.lineTo(x + size, y)  # 右下角
    ctx.lineTo(x + size / 2, y - height)  # 上頂點
    ctx.closePath()
    ctx.fillStyle = "lightcoral"  # 填充顏色
    ctx.fill()  # 填充顏色

# 繪製圓形
def draw_circle(x, y, radius):
    ctx.beginPath()
    ctx.arc(x, y, radius, 0, 2 * pi)
    ctx.closePath()
    ctx.fillStyle = "yellow"  # 填充顏色
    ctx.fill()  # 填充顏色

# 繪製正方形
def draw_square(x, y, size):
    ctx.beginPath()
    ctx.rect(x, y, size, size)
    ctx.closePath()
    ctx.fillStyle = "lightpink"  # 填充顏色
    ctx.fill()  # 填充顏色

# 繪製長方形
def draw_rectangle(x, y, width, height):
    ctx.beginPath()
    ctx.rect(x, y, width, height)
    ctx.closePath()
    ctx.fillStyle = "lightyellow"  # 填充顏色
    ctx.fill()  # 填充顏色

# 主繪圖函數
def draw_shapes():
    draw_origin()
    draw_axes()
    
    # 設定每個形狀的起始位置
    start_x, start_y = origin_x + 50, origin_y + 50

    # 繪製正六邊形（不變）
    draw_hexagon(start_x, start_y, 40)  # 六邊形
    
    # 繪製更尖且縮小的菱形
    draw_sharp_small_diamond(start_x + 120, start_y, 30)  # 更尖且縮小的菱形
    
    # 繪製縮小的三角形，並放置在菱形的右下角
    triangle_size = 25  # 縮小的三角形大小
    triangle_x = start_x + 120 + 40  # 菱形右下角的 x 坐標
    triangle_y = start_y + 40  # 菱形右下角的 y 坐標
    draw_triangle(triangle_x, triangle_y, triangle_size)  # 三角形
    
    # 繪製圓形
    circle_x = start_x + 250
    circle_y = start_y
    draw_circle(circle_x, circle_y, 40)  # 圓形
    
    # 計算正方形和長方形的 y 坐標，使其與圓形的中心對齊
    square_y = circle_y - 30  # 正方形的中心對齊圓形中心
    rectangle_y = circle_y - 30  # 長方形的中心對齊圓形中心
    
    # 繪製正方形
    draw_square(start_x + 320, square_y, 60)  # 正方形
    
    # 繪製長方形
    draw_rectangle(start_x + 410, rectangle_y, 100, 60)  # 長方形

# 執行繪圖
draw_shapes()
</pre>
<p></p>
<p></p>
<h1>HW 3</h1>
<h4>主題: Python 的數字、演算法與迴圈 (20%)</h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 4 and Part 5</p>
<p>完成上述流程整理後, 請將 HW3 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 3 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 3 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w16_exam2</h3>
<p><span>請以</span><span>自己的學號最後四碼</span><span>作為下列繪圖的左上方點座標, (例如: 若學號最後四碼為 3932, 請將 (39, 32) 作為繪圖左上方點座標), 並以紅色文字標示出該點座標 (例如: (39, 32)), 之後請利用 </span><span>pixel=2 的藍色直線</span><span>, </span><span>自訂迷宮畫布大小</span><span>, 直接在頁面畫出下列圖像, 繪圖程式除了必須直接列在頁面 html 檔案外, 也請存入自己的 Gist 區域, 並在所完成的圖像下方, 以自選標題的 anchor 連結至 Gist, 讓使用者點擊該連結後, 可以在各自的 Brython 頁面中繪出下列圖像).</span></p>
<p><span></span><a href="https://mdecp2024.github.io/hw-41323139/content/Brython.html?src=https://gist.githubusercontent.com/41323139/98079477260d4dfe5907c89ad5c92d18/raw/d0797f42e77013ce4d746fc10f72291068626e8d/w16_exam2.py">w16_exam2</a></p>
<p><img alt="" height="559" src="/images/下載.png" width="559"/></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/mtBWUzef-bo" width="560"></iframe></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc

# 初始化畫布
def create_canvas(id="brython_div1", width=550, height=550):
    """
    初始化畫布，並插入到指定的 HTML 容器中。
    返回畫布及其 2D 繪圖上下文。
    """
    # 建立一個 Canvas 元素
    canvas = html.CANVAS(id="maze_canvas", width=width, height=height)
    # 將 Canvas 插入到指定的 HTML 元素中
    doc[id] &lt;= canvas
    return canvas, canvas.getContext("2d")

# 繪製迷宮
def draw_maze(ctx, origin_x=31, origin_y=39):
    """
    根據原點繪製迷宮，並用紅色標記起始座標。
    """
    # 設定起始點的標記文字（紅色）
    ctx.font = "12px Arial"  # 字體大小和樣式
    ctx.fillStyle = "red"  # 填充文字顏色為紅色
    ctx.fillText(f"({origin_x}, {origin_y})", origin_x + 5, origin_y - 5)  # 在起始點附近標示文字

    # 設定藍色線條樣式
    ctx.strokeStyle = "blue"  # 設定線條顏色為藍色
    ctx.lineWidth = 2  # 設定線條寬度為 2

    # 定義迷宮的所有線條座標 (起點 x1, y1 到 終點 x2, y2)
    lines = [
        # 水平線條
        (origin_x, origin_y, 200, origin_y),
        (300, origin_y, 500, origin_y),
        (150, 100, 400, 100),
        (150, 300, 400, 300),
        (origin_x, 500, 200, 500),
        (300, 500, 500, 500),
        (200, 400, 300, 400),
        (origin_x, 200, 200, 200),

        # 垂直線條
        (origin_x, origin_y, origin_x, 500),
        (500, origin_y, 500, 500),
        (200, 100, 200, 200),
        (400, 100, 400, 200),
        (300, 200, 300, 300),
        (400, 300, 400, 500),
        (200, 400, 200, 500),
        (150, 300, 150, 400),
    ]

    # 開始繪製線條
    ctx.beginPath()
    for x1, y1, x2, y2 in lines:
        ctx.moveTo(x1, y1)  # 移動到線條的起點
        ctx.lineTo(x2, y2)  # 畫到線條的終點
    ctx.stroke()  # 實際繪製所有的線條

# 主程式執行
def main():
    """
    主函式：負責初始化畫布，並繪製迷宮。
    """
    # 初始化畫布，指定畫布大小為 550x550 並加入到 id="brython_div1" 的 HTML 元素中
    canvas, ctx = create_canvas()

    # 繪製迷宮，設定原點為 (31, 39)
    draw_maze(ctx, origin_x=31, origin_y=39)

# 執行主程式
main()
</pre>
<p></p>
<p></p>
<h1>HW 4</h1>
<h4>主題: 利用 Python 控制機電模擬系統 (20%)</h4>
<p style="padding-left: 30px;">利用 <a href="https://solvespace.com/">https://solvespace.com/</a> 建立機械系統零組件</p>
<p style="padding-left: 30px;">利用 <a href="https://www.coppeliarobotics.com/">CoppeliaSim</a> 建立機電模擬系統</p>
<p style="padding-left: 30px;">利用 <a href="https://manual.coppeliarobotics.com/en/zmqRemoteApiOverview.htm">Python</a> 跨網路控制瀏覽器上的機電模擬系統</p>
<p style="padding-left: 30px;">範例:</p>
<p style="padding-left: 60px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 60px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<p>完成上述流程整理後, 請將 HW4 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 4 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 4 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w16_exam3</h3>
<p>請以<span>自己的學號最後四碼</span>作為下列繪圖的左上方點座標, (例如: 若學號最後四碼為 3932, 請將 (39, 32) 作為繪圖左上方點座標), 並以紅色文字標示出該點座標 (例如: (39, 32)), 之後請利用<span> </span><span>pixel=2 的黑色直線</span>,<span> </span><span>自訂迷宮畫布大小</span>, 直接在頁面畫出下列圖像, 並且<span>利用紅色連續線段標示從上方入口, 走至下方出口的路線圖</span>.</p>
<p>繪圖程式除了必須直接列在頁面 html 檔案外, 也請存入自己的 Gist 區域, 並在所完成的圖像下方, 以自選標題的 anchor 連結至 Gist, 讓使用者點擊該連結後, 可以在各自的 Brython 頁面中繪出下列圖像).</p>
<p><a href="https://mdecp2024.github.io/hw-41323139/content/Brython.html?src=https://gist.githubusercontent.com/41323139/98079477260d4dfe5907c89ad5c92d18/raw/878ca8f684f58141f6ac04683a094dc4d813e2a8/w16_exam3.py">w16_exam3</a></p>
<p><img alt="" height="550" src="/images/螢幕擷取畫面 2025-01-05-1 160027.png" width="550"/></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/wRzY0IbhtME" width="560"></iframe></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc

# 初始化畫布
def create_canvas(id="brython_div1", width=550, height=550):
    """
    初始化畫布，並插入到指定的 HTML 容器中。
    返回畫布及其 2D 繪圖上下文。
    """
    canvas = html.CANVAS(id="maze_canvas", width=width, height=height)
    doc[id] &lt;= canvas
    return canvas, canvas.getContext("2d")

# 繪製迷宮
def draw_maze(ctx, origin_x=31, origin_y=39):
    """
    根據原點繪製迷宮，並用紅色標記起始座標。
    """
    # 設定起始點的標記文字（紅色）
    ctx.font = "12px Arial"
    ctx.fillStyle = "red"
    ctx.fillText(f"({origin_x}, {origin_y})", origin_x + 5, origin_y - 5)

    # 設定黑色線條樣式
    ctx.strokeStyle = "black"
    ctx.lineWidth = 2

    # 定義迷宮的所有線條座標 ( 起點 x1, y1 到 終點 x2, y2)
    lines = [
        # 水平線條
        (origin_x, origin_y, 200, origin_y),
        (300, origin_y, 500, origin_y),
        (150, 100, 400, 100),
        (150, 300, 400, 300),
        (origin_x, 500, 200, 500),
        (300, 500, 500, 500),
        (200, 400, 300, 400),
        (origin_x, 200, 200, 200),
        # 垂直線條
        (origin_x, origin_y, origin_x, 500),
        (500, origin_y, 500, 500),
        (200, 100, 200, 200),
        (400, 100, 400, 200),
        (300, 200, 300, 300),
        (400, 300, 400, 500),
        (200, 400, 200, 500),
        (150, 300, 150, 400),
    ]

    # 開始繪製線條
    ctx.beginPath()
    for x1, y1, x2, y2 in lines:
        ctx.moveTo(x1, y1)
        ctx.lineTo(x2, y2)
    ctx.stroke()

# 自動尋找出口路徑
def find_path():
    """
    定義從原點自動尋找出口的路徑，避免與牆壁重疊。
    """
    # 手動設計的路徑，確保不與牆壁重疊
    return [
        (225, 0), (225, 50), (425, 50), (425, 225),
        (320, 225), (325, 125), (225, 125), (225, 225),(75, 225),(75, 425),
        (150, 425), (150, 325),(325, 325),(325, 425),(225, 425),(225, 500), # 出口點
    ]

# 繪製路徑
def draw_path(ctx, path, origin_x=31, origin_y=39):
    """
    繪製從入口到出口的路徑。
    """
    ctx.strokeStyle = "red"
    ctx.lineWidth = 2
    ctx.beginPath()
    for i, (x, y) in enumerate(path):
        if i == 0:
            ctx.moveTo(x + origin_x, y + origin_y)
        else:
            ctx.lineTo(x + origin_x, y + origin_y)
    ctx.stroke()

# 主程式執行
def main():
    """
    主函式：負責初始化畫布，並繪製迷宮及路徑。
    """
    # 初始化畫布，指定大小為 550x550
    canvas, ctx = create_canvas(width=550, height=550)

    # 繪製迷宮，設定原點為 (31, 39)
    draw_maze(ctx, origin_x=31, origin_y=39)

    # 自動尋找出口的路徑
    path = find_path()

    # 繪製路徑
    draw_path(ctx, path, origin_x=31, origin_y=39)

# 執行主程式
main()
</pre>
<p></p><h1>Final Report</h1>
<p>期末口頭與書面專題報告 (20%)</p>
<p>期末口頭專題報告影片:</p>
<p style="padding-left: 30px;">......</p>
<p>期末書面專題報告檔案 (pdf):</p>
<p style="padding-left: 30px;">......</p>
<p>電腦輔助設計與實習課程總結心得:</p>
<p style="padding-left: 30px;">......</p>
<p>期末報告自評成績:</p>
<p style="padding-left: 30px;">完成上述流程後, 請將 Final Report 自評分數輸入 cp2024 自評表單中.</p>
<h1>Brython</h1>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>